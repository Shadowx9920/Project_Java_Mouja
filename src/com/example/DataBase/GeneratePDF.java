package com.example.DataBase;

import java.io.File;
import java.io.FileOutputStream;
import java.util.Date;
import java.util.LinkedList;

import com.example.Beans.Commande;
import com.example.Beans.Fournisseur;
import com.example.Beans.Product;
import com.example.Beans.Accounts.Admin;
import com.example.Beans.Accounts.User;
import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.List;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

public class GeneratePDF {

    public static String pdfName = "GeneratedPDFRepport";

    private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
    private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL, BaseColor.RED);
    private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16, Font.BOLD);
    private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);

    public static void generatePDF(String directoryPath) {
        for (int i = 0; i < 100; i++) {
            String filePath = directoryPath + "\\" + pdfName +"_"+i+".pdf";
            File DB = new File(filePath);
            if (!DB.exists()) {
                try {
                    Document document = new Document();
                    PdfWriter.getInstance(document, new FileOutputStream(filePath));
                    document.open();
                    addMetaData(document);
                    addTitlePage(document);
                    addContent(document);
                    document.close();
                    break;
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }

    private static void addMetaData(Document document) {
        document.addTitle("Mouja Repport");
        document.addSubject("Generated PDF");
        document.addKeywords("Java, PDF, iText , Mouja, Repport");
        document.addAuthor("Mouja");
        document.addCreator("Youssef Outahar");
    }

    private static void addTitlePage(Document document)
            throws DocumentException {
        Paragraph preface = new Paragraph();
        // We add one empty line
        addEmptyLine(preface, 1);
        
        // Lets write a big header
        preface.add(new Paragraph("                                             Mouja Report", catFont));
        preface.setAlignment(Element.ALIGN_CENTER);
        
        addEmptyLine(preface, 4);


        // Will create: Report generated by: _name, _date
        preface.add(new Paragraph(
                "Report generated by: " + System.getProperty("user.name") + ", " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
                smallBold));
        addEmptyLine(preface, 3);
        preface.add(new Paragraph(
                "This document gives a detailed description of all the contents of the app, and the history of every transaction made by users. ",
                smallBold));

        addEmptyLine(preface, 8);

        preface.add(new Paragraph(
                "This document is a preliminary version and not subject to your license agreement or any other agreement.",
                redFont));

        document.add(preface);
        // Start a new page
        document.newPage();
    }

    private static void addContent(Document document) throws DocumentException {
        Anchor anchor = new Anchor("Admins And Users", catFont);
        anchor.setName("Admins And Users");

        Chapter catPart = new Chapter(new Paragraph(anchor), 1);

        Paragraph subPara = new Paragraph("Admins List", subFont);
        
        Section subCatPart = catPart.addSection(subPara);
        
        createAdminsList(subCatPart);

        subPara = new Paragraph("Users List:", subFont);
        subCatPart = catPart.addSection(subPara);

        createUsersList(subCatPart);
        Paragraph paragraph = new Paragraph();
        addEmptyLine(paragraph, 5);
        subCatPart.add(paragraph);

        document.add(catPart);

        //--------------------------------------------------------

        anchor = new Anchor("Products", catFont);
        anchor.setName("Products");

        catPart = new Chapter(new Paragraph(anchor), 1);

        subPara = new Paragraph("Products List:", subFont);
        subCatPart = catPart.addSection(subPara);
        
        createProductsList(subCatPart);

        document.add(catPart);

        //--------------------------------------------------------

        anchor = new Anchor("Fournisseurs", catFont);
        anchor.setName("Fournisseurs");

        catPart = new Chapter(new Paragraph(anchor), 1);

        subPara = new Paragraph("Fournisseurs List:", subFont);
        subCatPart = catPart.addSection(subPara);
        
        createFournisseursList(subCatPart);

        document.add(catPart);

        //--------------------------------------------------------

        anchor = new Anchor("Commandes:", catFont);
        anchor.setName("Commandes:");

        catPart = new Chapter(new Paragraph(anchor), 1);

        subPara = new Paragraph("Commandes List:", subFont);
        subCatPart = catPart.addSection(subPara);
        
        createCommandesList(subCatPart);

        document.add(catPart);

        //--------------------------------------------------------

        anchor = new Anchor("Commandes et Produits :", catFont);
        anchor.setName("Commandes et Produits :");

        catPart = new Chapter(new Paragraph(anchor), 1);

        subPara = new Paragraph("Chaque Commandes avec ces Produits :", subFont);
        subCatPart = catPart.addSection(subPara);
        
        createCommandesProductList(subCatPart);

        document.add(catPart);

        //--------------------------------------------------------

        anchor = new Anchor("Commandes et Utilisateurs :", catFont);
        anchor.setName("Commandes et Utilisateurs :");

        catPart = new Chapter(new Paragraph(anchor), 1);

        subPara = new Paragraph("Chaque Utilisateurs avec ces Commandes :", subFont);
        subCatPart = catPart.addSection(subPara);
        
        createCommandesUsersList(subCatPart);

        document.add(catPart);
    }

    public static void generateUsers(Section subCatPart) throws BadElementException{

        LinkedList<User> users = DBget.getAllUsers();

        PdfPTable table = new PdfPTable(6);

        PdfPCell c1 = new PdfPCell(new Phrase("ID"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Name"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Password"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Email"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Number"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Creation Date"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        table.setHeaderRows(1);

        for (User user : users) {
            table.addCell(user.getId() + "");
            table.addCell(user.getUsername());
            table.addCell(user.getPassword());
            table.addCell(user.getEmail());
            table.addCell(user.getPhoneNumber());
            table.addCell(user.getDate());
        }

        table.addCell("1.0");
        table.addCell("1.1");
        table.addCell("1.2");
        table.addCell("2.1");
        table.addCell("2.2");
        table.addCell("2.3");

        subCatPart.add(table);
    }

    private static void createAdminsList(Section subCatPart){
        LinkedList<Admin> admins = DBget.getAllAdmins();
        List list = new List(false, false, 10);
        for (Admin admin : admins) {
            list.add("  Name : "+admin.getUsername() + "\n" +"  -- Password : " +admin.getPassword() + "\n" + "  -- Email : " +admin.getEmail() + "\n" + "  -- Number : " +admin.getPhoneNumber() + "\n" + "  -- CreationDate : " +admin.getDate());
        }
        subCatPart.add(list);
    }
    
    private static void createUsersList(Section subCatPart){
        LinkedList<User> users = DBget.getAllUsers();
        List list = new List(true, false, 10);
        for (User user : users) {
            list.add("  UserName : " +user.getUsername() + "\n" + "  -- Password : " +user.getPassword() + "\n" + "  -- Email : " +user.getEmail() + "\n" + "  -- Phone Number : " +user.getPhoneNumber() + "\n" + "  -- Creation Date : " +user.getDate());
        }
        subCatPart.add(list);
    }

    private static void createProductsList(Section subCatPart){
        LinkedList<Product> products = DBget.getAllProducts();
        List list = new List(true, false, 10);
        for (Product product : products) {
            list.add("  Name : " +product.getName() + "\n" + "  -- Price : " +product.getPrice() + "\n" + "  -- Description : " +product.getDescription() + "\n" + "  -- Creation Date : " +product.getDate());
        }
        subCatPart.add(list);
    }

    private static void createFournisseursList(Section subCatPart){
        LinkedList<Fournisseur> fournisseurs = DBget.getAllFournisseurs();
        List list = new List(true, false, 10);
        for (Fournisseur fournisseur : fournisseurs) {
            list.add("  ID : " +fournisseur.getId()+"\n"+"  -- Name : " +fournisseur.getName() + "\n" + "  -- Creation Date : " +fournisseur.getDate());
        }
        subCatPart.add(list);
    }

    private static void createCommandesList(Section subCatPart) {
        LinkedList<Commande> commandes = DBget.getAllCommandes();
        List list = new List(true, false, 10);
        for (Commande commande : commandes) {
            list.add("  ID : " +commande.getId()+"\n" + "  -- Buyer : " +commande.getBuyer().getUsername() + "\n"  + "  -- Total Price : " +commande.getTotalPrice()+"\n"+"  -- Creation Date : " +commande.getDate());
        }
        subCatPart.add(list);
    }

    private static void createCommandesProductList(Section subCatPart){
        LinkedList<Commande> commandes = DBget.getAllCommandes();
        List list = new List(true, false, 10);
        for (Commande commande : commandes) {
            String ListMsg = "  ID : " +commande.getId();
            LinkedList<Product> products = DBget.getCommandeProducts(commande.getId());
            for (Product Product : products) {
                ListMsg += "\n  -- Product : " +Product.getName();
            }
            list.add(ListMsg);
        }
        subCatPart.add(list);
    }

    private static void createCommandesUsersList(Section subCatPart){
        LinkedList<User> users = DBget.getAllUsers();
        List list = new List(true, false, 10);
        for (User user : users) {
            String ListMsg = "  User Name : " + user.getUsername();
            LinkedList<Commande> Commandes = DBget.getAllUserCommandes(user.getId());
            for (Commande commande : Commandes) {
                ListMsg += "\n  -- Commande ID : " +commande.getId();
            }
            list.add(ListMsg);
        }
        subCatPart.add(list);
    }

    private static void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }
}
